/**
 * @fileoverview N√≠vel 2 - Valida√ß√£o Segura (Secure Auth)
 * 
 * Verifica permiss√µes hier√°rquicas com dados atualizados do Firestore.
 * 
 * ‚ö° Performance: ~100ms (com valida√ß√£o e consulta DB)
 * üîí Seguran√ßa: Muito Alta (sess√£o + Firestore + hierarquia)
 * üéØ Uso: Server actions, controle de acesso hier√°rquico
 * 
 * üëë Hierarquia: admin (3) > professor (2) > aluno (1)
 * 
 * ‚úÖ Valida√ß√µes:
 * - Session cookie v√°lido
 * - Role atualizado do Firestore
 * - Hierarquia de permiss√µes
 * 
 * @param requiredRole - N√≠vel m√≠nimo de permiss√£o necess√°rio
 * @returns true se usu√°rio tem permiss√£o igual ou superior
 * 
 * @example
 * ```typescript
 * // Admin pode acessar √°rea de professor
 * if (await hasPermission('professor')) {
 *   return <TeacherArea />
 * }
 * 
 * // Server action restrita
 * export async function deleteContent() {
 *   if (!(await hasPermission('admin'))) {
 *     throw new Error('Apenas admins podem deletar')
 *   }
 * }
 * ```
 */
'use server'

import { getUserFromSession } from './getUserFromSession'

// Helper para verificar permiss√µes espec√≠ficas com valida√ß√£o de sess√£o
export async function hasPermission(requiredRole: 'admin' | 'professor' | 'aluno'): Promise<boolean> {
    try {
        const user = await getUserFromSession()
        if (!user) return false

        // Hierarquia de permiss√µes: admin > professor > aluno
        const roleHierarchy = { admin: 3, professor: 2, aluno: 1 }
        const userLevel = roleHierarchy[user.role as keyof typeof roleHierarchy] || 0
        const requiredLevel = roleHierarchy[requiredRole]

        return userLevel >= requiredLevel
    } catch {
        return false
    }
} 