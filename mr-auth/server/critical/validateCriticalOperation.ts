/**
 * @fileoverview N√≠vel 3 - Valida√ß√£o Cr√≠tica (Critical Auth)
 * 
 * Valida√ß√£o m√°xima para opera√ß√µes cr√≠ticas com m√∫ltiplas camadas de seguran√ßa.
 * 
 * ‚ö° Performance: ~150ms (valida√ß√£o completa)
 * üîí Seguran√ßa: M√°xima (Firebase + Firestore + tempo + extras)
 * üéØ Uso: Opera√ß√µes financeiras, deletar dados, altera√ß√µes cr√≠ticas
 * 
 * üõ°Ô∏è Valida√ß√µes:
 * - Session cookie v√°lido pelo Firebase
 * - Dados sincronizados com Firestore
 * - Token com menos de 1 hora (seguran√ßa extra)
 * - Tratamento robusto de erros
 * 
 * ‚ö†Ô∏è IMPORTANTE:
 * - Use APENAS para opera√ß√µes cr√≠ticas
 * - Tokens expiram em 1 hora para m√°xima seguran√ßa
 * - Rejeita tokens antigos mesmo que v√°lidos
 * - Para opera√ß√µes sens√≠veis: pagamentos, deletar usu√°rios, etc.
 * 
 * @example
 * ```typescript
 * export async function deleteUser(userId: string) {
 *   const user = await validateCriticalOperation()
 *   if (!user || user.role !== 'admin') {
 *     throw new Error('Sem permiss√£o para opera√ß√£o cr√≠tica')
 *   }
 *   
 *   // S√≥ executa se TUDO estiver v√°lido
 *   await deleteUserFromDatabase(userId)
 * }
 * 
 * export async function processPayment(amount: number) {
 *   const user = await validateCriticalOperation()
 *   if (!user) {
 *     throw new Error('Valida√ß√£o cr√≠tica falhou')
 *   }
 *   
 *   // Processa pagamento com seguran√ßa m√°xima
 * }
 * ```
 */
'use server'

import { cookies } from 'next/headers'
import { User } from '../../types/auth-types'
import { adminAuth, adminDb } from '@/firebase/firebase-admin'

// Helper para valida√ß√£o completa em opera√ß√µes cr√≠ticas (n√≠vel m√°ximo)
export async function validateCriticalOperation(): Promise<User | null> {
    try {
        const cookieStore = await cookies()
        const sessionCookie = cookieStore.get('session')?.value

        if (!sessionCookie) return null

        // Valida session cookie
        const decodedToken = await adminAuth.verifySessionCookie(sessionCookie)

        // Busca dados atualizados no Firestore
        const userDoc = await adminDb.collection('users').doc(decodedToken.uid).get()
        if (!userDoc.exists) return null

        const firestoreData = userDoc.data()

        // Valida√ß√µes adicionais para opera√ß√µes cr√≠ticas
        const now = Date.now()
        const tokenIssuedAt = decodedToken.iat * 1000
        const maxAge = 60 * 60 * 1000 // 1 hora para opera√ß√µes cr√≠ticas

        if (now - tokenIssuedAt > maxAge) {
            throw new Error('Token muito antigo para opera√ß√£o cr√≠tica')
        }

        return {
            role: firestoreData?.role || 'aluno',
            plan: firestoreData?.plan || 'free',
            name: decodedToken.name || '',
            email: decodedToken.email || '',
            photo: decodedToken.picture || ''
        }
    } catch (error) {
        console.error('Erro na valida√ß√£o cr√≠tica:', error)
        return null
    }
} 